name: container build and push

on:
  push:
    branches: [ "*" ]
    tags: [ '*.*.*' ]
  pull_request:
    branches: [ "*" ]

env:
  REGISTRY: ghcr.io
  EULIX_REGISTRY: ${{ secrets.EULIX_REGISTRY }}
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    - name: Inspect builder
      run: |
        echo "Name:      ${{ steps.buildx.outputs.name }}"
        echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
        echo "Status:    ${{ steps.buildx.outputs.status }}"
        echo "Flags:     ${{ steps.buildx.outputs.flags }}"
        echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log into registry ${{ env.EULIX_REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.EULIX_REGISTRY }}
        username: ${{ secrets.EULIX_REGISTRY_USERNAME }}
        password: ${{ secrets.EULIX_REGISTRY_PASSWORD }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v2
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          ${{ env.EULIX_REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      id: build-and-push 
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        builder: ${{ steps.buildx.outputs.name }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: Dockerfile